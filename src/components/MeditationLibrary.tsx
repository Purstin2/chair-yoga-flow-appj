
import React, { useState } from 'react';
import { ArrowLeftIcon, ClockIcon, PlayIcon } from '@heroicons/react/24/outline';

interface Meditation {
  id: number;
  name: string;
  duration: string;
  category: string;
  difficulty: string;
  image: string;
  description: string;
  benefits: string;
  audioGuide: string;
}

interface MeditationLibraryProps {
  onBack: () => void;
}

const MeditationLibrary: React.FC<MeditationLibraryProps> = ({ onBack }) => {
  const [selectedCategory, setSelectedCategory] = useState('Todas');
  const [selectedMeditation, setSelectedMeditation] = useState<Meditation | null>(null);

  const meditations: Meditation[] = [
    {
      id: 1,
      name: 'Respira√ß√£o 4-7-8',
      duration: '5min',
      category: 'Respira√ß√£o',
      difficulty: 'Iniciante',
      image: 'ü´Å',
      description: 'T√©cnica de respira√ß√£o para reduzir ansiedade e promover relaxamento profundo.',
      benefits: 'Reduz ansiedade, melhora o sono, diminui o estresse',
      audioGuide: 'Inspire por 4 segundos, segure por 7, expire por 8...'
    },
    {
      id: 2,
      name: 'Medita√ß√£o do Presente',
      duration: '10min',
      category: 'Mindfulness',
      difficulty: 'Iniciante',
      image: 'üßò‚Äç‚ôÄÔ∏è',
      description: 'Pr√°tica de aten√ß√£o plena para conectar-se com o momento presente.',
      benefits: 'Aumenta foco, reduz pensamentos ansiosos, promove clareza mental',
      audioGuide: 'Concentre-se na sua respira√ß√£o, observe sem julgar...'
    },
    {
      id: 3,
      name: 'Relaxamento Muscular',
      duration: '15min',
      category: 'Relaxamento',
      difficulty: 'F√°cil',
      image: 'üíÜ‚Äç‚ôÄÔ∏è',
      description: 'Relaxamento progressivo de todos os grupos musculares do corpo.',
      benefits: 'Alivia tens√£o muscular, reduz dores, promove relaxamento profundo',
      audioGuide: 'Comece pelos p√©s, tense e relaxe cada m√∫sculo...'
    },
    {
      id: 4,
      name: 'Visualiza√ß√£o Curativa',
      duration: '8min',
      category: 'Cura',
      difficulty: 'Intermedi√°rio',
      image: '‚ú®',
      description: 'Medita√ß√£o com visualiza√ß√µes para promover cura e bem-estar.',
      benefits: 'Fortalece sistema imunol√≥gico, reduz dor, acelera recupera√ß√£o',
      audioGuide: 'Imagine uma luz dourada envolvendo seu corpo...'
    },
    {
      id: 5,
      name: 'Gratid√£o Di√°ria',
      duration: '7min',
      category: 'Bem-estar',
      difficulty: 'F√°cil',
      image: 'üôè',
      description: 'Pr√°tica di√°ria de gratid√£o para cultivar sentimentos positivos.',
      benefits: 'Melhora humor, aumenta satisfa√ß√£o, reduz depress√£o',
      audioGuide: 'Pense em tr√™s coisas pelas quais voc√™ √© grato hoje...'
    }
  ];

  // Adicionar mais medita√ß√µes mockup
  const generateMockMeditations = () => {
    const mockMeditations = [];
    const categories = ['Respira√ß√£o', 'Mindfulness', 'Relaxamento', 'Cura', 'Bem-estar', 'Sono'];
    const names = [
      'Respira√ß√£o Oce√¢nica', 'Aten√ß√£o aos Sons', 'Corpo Scan', 'Luz Interior',
      'Amor Pr√≥prio', 'Prepara√ß√£o para Dormir', 'Energia Matinal', 'Pausa Consciente',
      'Liberta√ß√£o de Tens√µes', 'Concentra√ß√£o Total', 'Paz Interior', 'Autocura',
      'Momento Zen', 'Respira√ß√£o Profunda', 'Equil√≠brio Emocional', 'For√ßa Interior',
      'Calma Mental', 'Renova√ß√£o Energ√©tica', 'Serenidade', 'Despertar Consciente'
    ];

    for (let i = 0; i < 20; i++) {
      mockMeditations.push({
        id: i + 6,
        name: names[i],
        duration: `${Math.floor(Math.random() * 15) + 3}min`,
        category: categories[Math.floor(Math.random() * categories.length)],
        difficulty: ['Iniciante', 'F√°cil', 'Intermedi√°rio'][Math.floor(Math.random() * 3)],
        image: ['üßò‚Äç‚ôÄÔ∏è', 'ü´Å', 'üíÜ‚Äç‚ôÄÔ∏è', '‚ú®', 'üôè', 'üåô'][Math.floor(Math.random() * 6)],
        description: 'Pr√°tica de medita√ß√£o para promover bem-estar e equil√≠brio.',
        benefits: 'Reduz estresse, melhora foco, promove relaxamento',
        audioGuide: 'Guia de √°udio para esta medita√ß√£o...'
      });
    }
    return mockMeditations;
  };

  const allMeditations = [...meditations, ...generateMockMeditations()];
  const categories = ['Todas', 'Respira√ß√£o', 'Mindfulness', 'Relaxamento', 'Cura', 'Bem-estar', 'Sono'];

  const filteredMeditations = selectedCategory === 'Todas' 
    ? allMeditations 
    : allMeditations.filter(meditation => meditation.category === selectedCategory);

  if (selectedMeditation) {
    return (
      <div className="p-4 pb-24 max-w-md mx-auto">
        <div className="flex items-center mb-6">
          <button
            onClick={() => setSelectedMeditation(null)}
            className="mr-4 p-2 hover:bg-white/50 rounded-full transition-colors"
          >
            <ArrowLeftIcon className="h-6 w-6 text-purple-700" />
          </button>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">{selectedMeditation.name}</h1>
            <p className="text-gray-600">{selectedMeditation.category}</p>
          </div>
        </div>

        <div className="bg-white/90 backdrop-blur-sm rounded-2xl p-5 mb-6 shadow-lg border border-white/20">
          <div className="text-6xl text-center mb-4">{selectedMeditation.image}</div>
          
          <div className="flex justify-around mb-6">
            <div className="text-center">
              <ClockIcon className="w-5 h-5 mx-auto mb-1 text-purple-600" />
              <p className="text-sm text-gray-900">{selectedMeditation.duration}</p>
            </div>
            <div className="text-center">
              <span className="w-5 h-5 mx-auto mb-1 text-purple-600 block text-center">‚≠ê</span>
              <p className="text-sm text-gray-900">{selectedMeditation.difficulty}</p>
            </div>
          </div>

          <div className="bg-purple-50 rounded-xl p-4 mb-4">
            <p className="text-sm text-gray-700">{selectedMeditation.description}</p>
          </div>

          <div className="bg-green-50 rounded-xl p-4 mb-6">
            <h4 className="font-semibold text-gray-900 mb-2">üéØ Benef√≠cios:</h4>
            <p className="text-sm text-gray-700">{selectedMeditation.benefits}</p>
          </div>

          <button className="w-full bg-gradient-to-r from-purple-600 to-pink-600 text-white py-4 rounded-xl font-medium text-lg hover:from-purple-700 hover:to-pink-700 transition-colors flex items-center justify-center gap-2">
            <PlayIcon className="h-5 w-5" />
            Iniciar Medita√ß√£o
          </button>
        </div>

        <div className="bg-white/90 backdrop-blur-sm rounded-2xl p-5 shadow-lg border border-white/20">
          <h3 className="font-semibold text-gray-900 mb-3">üéß Guia de √Åudio</h3>
          <p className="text-sm text-gray-700 leading-relaxed">
            {selectedMeditation.audioGuide}
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="p-4 pb-24 max-w-md mx-auto">
      <div className="flex items-center mb-6">
        <button
          onClick={onBack}
          className="mr-4 p-2 hover:bg-white/50 rounded-full transition-colors"
        >
          <ArrowLeftIcon className="h-6 w-6 text-purple-700" />
        </button>
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Medita√ß√£o e Respira√ß√£o</h1>
          <p className="text-gray-600">25 pr√°ticas de mindfulness</p>
        </div>
      </div>

      {/* Categories */}
      <div className="flex gap-2 mb-6 overflow-x-auto">
        {categories.map((category) => (
          <button
            key={category}
            onClick={() => setSelectedCategory(category)}
            className={`px-4 py-2 rounded-full text-sm font-medium whitespace-nowrap transition-colors ${
              selectedCategory === category
                ? 'bg-purple-600 text-white'
                : 'bg-white text-gray-600 border border-gray-200'
            }`}
          >
            {category}
          </button>
        ))}
      </div>

      {/* Meditations Grid */}
      <div className="grid grid-cols-2 gap-4">
        {filteredMeditations.map((meditation) => (
          <div
            key={meditation.id}
            onClick={() => setSelectedMeditation(meditation)}
            className="bg-white/90 backdrop-blur-sm rounded-xl p-4 shadow-lg border border-white/20 cursor-pointer hover:scale-105 transition-transform"
          >
            <div className="text-3xl text-center mb-2">{meditation.image}</div>
            <h3 className="font-semibold text-gray-900 text-sm mb-2 text-center line-clamp-2">
              {meditation.name}
            </h3>
            <div className="flex items-center justify-between text-xs text-gray-600">
              <span className="flex items-center gap-1">
                <ClockIcon className="h-3 w-3" />
                {meditation.duration}
              </span>
              <span className="bg-purple-100 text-purple-700 px-2 py-1 rounded-full">
                {meditation.difficulty}
              </span>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default MeditationLibrary;

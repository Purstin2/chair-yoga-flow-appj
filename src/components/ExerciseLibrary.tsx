
import React, { useState } from 'react';
import { ArrowLeft, Clock, Target, Filter, Search } from 'lucide-react';

interface Exercise {
  id: number;
  name: string;
  duration: string;
  difficulty: string;
  category: string;
  targetArea: string;
  image: string;
  description: string;
  benefits: string;
  instructions: string[];
}

interface ExerciseLibraryProps {
  onBack: () => void;
  onExerciseSelect: (exercise: Exercise) => void;
}

const ExerciseLibrary: React.FC<ExerciseLibraryProps> = ({ onBack, onExerciseSelect }) => {
  const [selectedCategory, setSelectedCategory] = useState('Todos');
  const [searchTerm, setSearchTerm] = useState('');

  const exercises: Exercise[] = [
    {
      id: 1,
      name: 'Respira√ß√£o Relaxante',
      duration: '5min',
      difficulty: 'F√°cil',
      category: 'Respira√ß√£o',
      targetArea: 'Mente',
      image: 'üßò‚Äç‚ôÄÔ∏è',
      description: 'T√©cnica de respira√ß√£o para acalmar a mente e reduzir o estresse',
      benefits: 'Reduz ansiedade, melhora concentra√ß√£o, diminui press√£o arterial',
      instructions: [
        'Sente-se confortavelmente',
        'Feche os olhos suavemente',
        'Respire profundamente pelo nariz',
        'Segure por 4 segundos',
        'Expire lentamente pela boca'
      ]
    },
    {
      id: 2,
      name: 'Alongamento Cervical',
      duration: '3min',
      difficulty: 'F√°cil',
      category: 'Mobilidade',
      targetArea: 'Pesco√ßo',
      image: 'üíÜ‚Äç‚ôÄÔ∏è',
      description: 'Exerc√≠cios suaves para aliviar tens√£o no pesco√ßo e ombros',
      benefits: 'Alivia dor de cabe√ßa, reduz rigidez cervical, melhora postura',
      instructions: [
        'Incline a cabe√ßa para direita',
        'Mantenha por 30 segundos',
        'Repita para o lado esquerdo',
        'Fa√ßa rota√ß√µes suaves',
        'Termine com relaxamento'
      ]
    },
    {
      id: 3,
      name: 'Postura da Montanha',
      duration: '4min',
      difficulty: 'F√°cil',
      category: 'Postura',
      targetArea: 'Corpo Todo',
      image: 'üèîÔ∏è',
      description: 'Fortalece a coluna e melhora o alinhamento corporal',
      benefits: 'Melhora postura, fortalece core, aumenta consci√™ncia corporal',
      instructions: [
        'Fique de p√© com p√©s paralelos',
        'Distribua o peso igualmente',
        'Alonga a coluna para cima',
        'Relaxe os ombros',
        'Respire profundamente'
      ]
    },
    {
      id: 4,
      name: 'Tor√ß√£o Sentada',
      duration: '6min',
      difficulty: 'M√©dio',
      category: 'Mobilidade',
      targetArea: 'Coluna',
      image: 'üåÄ',
      description: 'Melhora flexibilidade da coluna e massageia √≥rg√£os internos',
      benefits: 'Aumenta mobilidade espinhal, melhora digest√£o, alivia tens√£o',
      instructions: [
        'Sente-se com pernas estendidas',
        'Dobre o joelho direito',
        'Gire o tronco para direita',
        'Mantenha a posi√ß√£o',
        'Repita para o outro lado'
      ]
    },
    {
      id: 5,
      name: 'Relaxamento Progressivo',
      duration: '10min',
      difficulty: 'F√°cil',
      category: 'Relaxamento',
      targetArea: 'Corpo Todo',
      image: 'üò¥',
      description: 'T√©cnica para relaxar todos os m√∫sculos do corpo',
      benefits: 'Reduz estresse, melhora sono, diminui tens√£o muscular',
      instructions: [
        'Deite-se confortavelmente',
        'Comece pelos p√©s',
        'Tense e relaxe cada m√∫sculo',
        'Suba gradualmente pelo corpo',
        'Termine com respira√ß√£o profunda'
      ]
    },
    {
      id: 6,
      name: 'Gato-Vaca na Cadeira',
      duration: '3min',
      difficulty: 'F√°cil',
      category: 'Mobilidade',
      targetArea: 'Costas',
      image: 'üê±',
      description: 'Mobiliza a coluna vertebral de forma suave',
      benefits: 'Alivia dor nas costas, melhora flexibilidade, reduz rigidez',
      instructions: [
        'Sente-se na borda da cadeira',
        'Arqueie as costas (posi√ß√£o vaca)',
        'Arredonde as costas (posi√ß√£o gato)',
        'Alterne os movimentos',
        'Coordene com a respira√ß√£o'
      ]
    }
  ];

  // Adicionar mais exerc√≠cios mockup
  const generateMockExercises = () => {
    const mockExercises = [];
    const categories = ['Respira√ß√£o', 'Mobilidade', 'Postura', 'Relaxamento', 'Fortalecimento'];
    const targetAreas = ['Pesco√ßo', 'Ombros', 'Costas', 'Quadris', 'Corpo Todo', 'Mente'];
    const names = [
      'Flex√£o de Quadril', 'Rota√ß√£o de Ombros', 'Postura do Guerreiro', 'Medita√ß√£o Guiada',
      'Alongamento de Panturrilha', 'Fortalecimento Core', 'Respira√ß√£o 4-7-8', 'Postura da √Årvore',
      'Relaxamento Facial', 'Mobilidade de Pulsos', 'Postura do Beb√™', 'Respira√ß√£o Alternada',
      'Alongamento Lateral', 'Fortalecimento Gl√∫teos', 'Medita√ß√£o Caminhada', 'Postura da Cobra',
      'Relaxamento de Mand√≠bula', 'Mobilidade de Tornozelos', 'Postura da Ponte', 'Respira√ß√£o Quadrada',
      'Alongamento de Isquiotibiais', 'Fortalecimento Lombar', 'Medita√ß√£o do Sono', 'Postura do Tri√¢ngulo'
    ];

    for (let i = 0; i < 24; i++) {
      mockExercises.push({
        id: i + 7,
        name: names[i],
        duration: `${Math.floor(Math.random() * 15) + 3}min`,
        difficulty: Math.random() > 0.7 ? 'M√©dio' : 'F√°cil',
        category: categories[Math.floor(Math.random() * categories.length)],
        targetArea: targetAreas[Math.floor(Math.random() * targetAreas.length)],
        image: ['üßò‚Äç‚ôÄÔ∏è', 'üíÜ‚Äç‚ôÄÔ∏è', 'üèîÔ∏è', 'üåÄ', 'üò¥', 'üê±'][Math.floor(Math.random() * 6)],
        description: `Exerc√≠cio de ${categories[Math.floor(Math.random() * categories.length)].toLowerCase()} para melhorar seu bem-estar`,
        benefits: 'Melhora flexibilidade, reduz tens√£o, aumenta bem-estar',
        instructions: ['Posi√ß√£o inicial', 'Movimento principal', 'Respira√ß√£o coordenada', 'Finaliza√ß√£o']
      });
    }
    return mockExercises;
  };

  const allExercises = [...exercises, ...generateMockExercises()];
  const categories = ['Todos', 'Respira√ß√£o', 'Mobilidade', 'Postura', 'Relaxamento', 'Fortalecimento'];

  const filteredExercises = allExercises.filter(exercise => {
    const matchesCategory = selectedCategory === 'Todos' || exercise.category === selectedCategory;
    const matchesSearch = exercise.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         exercise.targetArea.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesCategory && matchesSearch;
  });

  return (
    <div className="p-4 pb-24 max-w-md mx-auto">
      <div className="flex items-center mb-6">
        <button
          onClick={onBack}
          className="mr-4 p-2 hover:bg-white/50 rounded-full transition-colors"
        >
          <ArrowLeft size={24} className="text-purple-700" />
        </button>
        <div>
          <h1 className="text-2xl font-bold text-purple-900">Exerc√≠cios de Yoga</h1>
          <p className="text-purple-600">30 exerc√≠cios para seu bem-estar</p>
        </div>
      </div>

      {/* Search Bar */}
      <div className="relative mb-4">
        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-purple-400" size={20} />
        <input
          type="text"
          placeholder="Buscar por exerc√≠cio ou √°rea do corpo..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="w-full pl-10 pr-4 py-3 bg-white border border-purple-200 rounded-xl focus:border-purple-500 focus:outline-none"
        />
      </div>

      {/* Categories */}
      <div className="flex gap-2 mb-6 overflow-x-auto">
        {categories.map((category) => (
          <button
            key={category}
            onClick={() => setSelectedCategory(category)}
            className={`px-4 py-2 rounded-full text-sm font-medium whitespace-nowrap transition-colors ${
              selectedCategory === category
                ? 'bg-purple-600 text-white'
                : 'bg-white text-purple-600 border border-purple-200'
            }`}
          >
            {category}
          </button>
        ))}
      </div>

      {/* Exercises Grid */}
      <div className="grid grid-cols-2 gap-4">
        {filteredExercises.map((exercise) => (
          <div
            key={exercise.id}
            onClick={() => onExerciseSelect(exercise)}
            className="gradient-card rounded-xl p-4 shadow-lg cursor-pointer hover:scale-105 transition-transform"
          >
            <div className="text-3xl text-center mb-2">{exercise.image}</div>
            <h3 className="font-semibold text-purple-900 text-sm mb-2 text-center line-clamp-2">
              {exercise.name}
            </h3>
            <div className="flex items-center justify-between text-xs text-purple-600 mb-2">
              <span className="flex items-center gap-1">
                <Clock size={12} />
                {exercise.duration}
              </span>
              <span className="bg-purple-100 px-2 py-1 rounded-full">
                {exercise.difficulty}
              </span>
            </div>
            <div className="text-center">
              <span className="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded-full">
                {exercise.targetArea}
              </span>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default ExerciseLibrary;
